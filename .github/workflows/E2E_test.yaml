name: E2E Test

on:
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        aggregate: [ order, payment, shipment]
        include:
          - aggregate: order
            command: 8081
            query: 8083
            data: '{"id": "2222"}'
          - aggregate: payment
            command: 9081
            query: 9083
            data: '{"id": "2222","paymentMethod": "ATM"}'
          - aggregate: shipment
            command: 10081
            query: 10083
            data: '{"id": "2222","shipmentMethod": "HOME_DELIVERY"}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon

      - name: Run The Cluster
        run: docker compose -f Docker/boot-run-${{ matrix.aggregate }}-apps-docker-compose.yml -f Docker/kafka-docker-compose.yml --env-file Docker/config/.env.docker -p event-sourcing up -d

      - name: Check the command-side
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://localhost:${{ matrix.command }}/actuator/health
          max-attempts: 6
          retry-delay: 20s
          retry-all: true

      - name: Check the query-side
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://localhost:${{ matrix.query }}/actuator/health
          max-attempts: 5
          retry-delay: 5s
          retry-all: true

      - name: Warm Up spring boot - kafka
        uses: indiesdev/curl@v1.1
        with:
          url: http://localhost:${{ matrix.command }}/api/v1/${{ matrix.aggregate}}s
          method: "POST"
          accept: 200
          headers: '{ "Content-Type": "application/json" }'
          body: ${{ matrix.data }}
          timeout: 120000
          log-response: true
          retries: 3

      - name: run Postman Collection
        uses: matt-ball/newman-action@master
        with:
          collection: postman/${{ matrix.aggregate }}.postman_collection.json

      - name: clean docker compose
        if: always()
        run: |
          docker compose -f Docker/boot-run-${{ matrix.aggregate }}-apps-docker-compose.yml -f Docker/kafka-docker-compose.yml --env-file Docker/config/.env.docker -p event-sourcing down
